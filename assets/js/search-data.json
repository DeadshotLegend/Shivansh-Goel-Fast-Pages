{
  
    
        "post0": {
            "title": "Unit 3 Lesson 7 Nested Conditionals",
            "content": "Nested Conditional Statements . Nested Conditional Statements consist of conditional statemetns within conditional statements. | Flow Chart of a Nested Conditional Statement includes: | . if conditionA: # Code here executes when &#39;conditionA&#39; is True else: # Code that runs when &#39;conditionA&#39; is False if conditionB: # Code that runs when &#39;conditionA&#39; is False # and &#39;conditionB&#39; is True . Example of nested conditional in python: . n=int(input(&#39;Enter marks: &#39;)) # checking the conditions if n&gt;=75: if n &gt;=95: print(&#39;Excellent&#39;) else: print(&#39;Pass&#39;) else: print(&#39;Fail&#39;) . If Else Statements can be put inside of another if else statement using this layout for psuedo code. | . if (condition 1) if (condition 2) #first block of statement else #second block of statement else if (condition 3) #third block of statement else #fourth block of statement . Challenge #1: Create your own Nested Conditional, with a if/else statement inside the else code of an if/else statement. . def function(x, y, z): if() #Code here if() #Code here else #Code here else if() #Code here else #Code here . Challenge #2: Create your own Nested Conditional with operators and comparing values . Ex: . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/fastpages/big%20idea%203/2022/12/05/.7-Nested-Conditionals.html",
            "relUrl": "/fastpages/big%20idea%203/2022/12/05/.7-Nested-Conditionals.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Scores Review",
            "content": "Lesson 3.1-3.2 . I scored .95/1, which I think that I deserved because I made sure to complete the assignment that was given to me as well as going above and beyond. I added extra albums part of the second part of the hacks that I needed to show. .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%2013/2022/12/02/scores.html",
            "relUrl": "/markdown/week%2013/2022/12/02/scores.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "Homeowork 2 . Finishing the homework Variables are going to be a variable called num which well be set to 7 Then we are going to create a while loop and within the while loop there will be an if else statement . def convert(value): if value &gt; 1: # dividing value by 2 convert(value//2) # Printing the module value when divded by 2 print(value%2, end = &quot;&quot;) convert(240) . 01100010 . values = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] # Defining a function with a for loop to iterate through the list &quot;values&quot; def length(list): for name in values: print(name + &quot;: &quot; + str(len(name)) + &quot; :first letter: &quot; + str(name[0]) + &quot; :second letter: &quot; + str(name[1]) + &quot; :third letter: &quot; + str(name[2])) length(values) . jaden: 5 :first letter: j :second letter: a :third letter: d max: 3 :first letter: m :second letter: a :third letter: x dylan: 5 :first letter: d :second letter: y :third letter: l orlando: 7 :first letter: o :second letter: r :third letter: l .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/11/30/homework2.html",
            "relUrl": "/2022/11/30/homework2.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Searching Introduction",
            "content": "What is searching? . In certain computer programs and applications, one might find the need to locate and retrieve a data value and/or it&#39;s index. Searching algorithms could be done in either intervals or sequences, and certain algorithms could be more efficient than others, with benefits and drawbacks to each. . The Naive Approach . The most intuitively obvious solution to the searching problem is to sequentialy check each successful value in the data structure until either a matching value is found, or the entire structure has been transversed. This thought process could be explained graphically in this example . This algorithm could also be expressed in code, as shown below. . def sequentialSearch(arr, target): N = len(arr) # Declare N as length of array for i in range(N): # Iterate over the list if arr[i] == target: # Check for match return i # Match found, return index and end function call return -1 # Element not found . Sequential Search - Larger Inputs . Although for selection sort is seemingly fast for smaller inputs, it is clear that it cannot keep up with increasing input sizes. Because sequential search checks every value of the given array, the algorithm&#39;s overall runtime increases &quot;linearly&quot; with the input size. . i.e. Pretend that one check takes one second, and that we are searching for the last element in an array. If the array length is 4, it would take 4 seconds to find the last element, whereas if the array length is 86400 indices long, it would take a whole day to find the element. . Hence, although selection sort is known for its simplicity, it is unfeasible for large inputs . Below, we have created three sorted lists of length 100,1000000,100000000. . import time arr1 = [i for i in range(100)] arr2 = [i for i in range(1000000)] arr3 = [i for i in range(100000000)] . To analyze the sequential search algorithm, we will check for the worst case scenario, where runtime is maximized. This is because when measuring the efficiency of our algorithm, we want to be able to guarantee an upper limit or set amount of time for our program to finish running. To do this, we will attempt to search for the last element in the array . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05602836608886719 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 58.67457389831543 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 5162.384986877441 ms . As you can see, as the input list grows larger and larger, the overall runtime of the program increases linearly as well, resulting in a lower scalability for the sequential search algorithm. . Binary Search . Binary search is an efficient way to iterate through a SORTED list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. . Unlike the sequential search method, binary search doesn&#39;t check for each successive element until a match is found. In every iteration the algorithm is making a binary decision; if the selected element is larger or smaller than the target. . How exactly does this work? Lets look at these amazing ms paint drawings: . i was too lazy to make a third so ur gonna have to live with 2 :) . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the closest power of 2 to 7 is 8. . If the array is 9 items long, the maximum possible cycles INCREASES to 4, as the closest, next power of two, is 16. . def binarySearch(array, target): # Parameters: array is the given array and target is what we are looking for low = 0 # the starting lower bound high = len(array)-1 # the starting upper bound while high &gt;= low: # we will keep running until we run out of possible subarrays... mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound if array[mid] == target: # if item is in the middle of the list... we found what we are looking for! return mid # therefore, we return the index of where we found the item. elif array[mid] &gt; target: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half # if nothing is returned by the time the while loop ends, that means item MUST be missing from list return False # therefore we tell the user that the requested item was not found . Likewise, we can also take a recursive approach to this problem, note the similarities . def BinarySearchRecursion(arr, target, lo, hi): if lo &gt; hi: return False mid = (lo+hi)//2 if arr[mid] == target: return mid elif arr[mid] &gt; target: return BinarySearchRecursion(arr, target, lo, mid-1) elif arr[mid] &lt; target: return BinarySearchRecursion(arr, target, mid+1, hi) . Now, let&#39;s compare the runtime with the same lists we tried with the sequential search algorithm. . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05507469177246094 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 0.17070770263671875 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 0.06628036499023438 ms . arr4 = [1,4,5,8,10,13,145,1938] print(&quot;Index: &quot;, binarySearch(arr4,17)) . Index: False . Challenges and Homework . You have one homework problem. . Yes just one. . Don&#39;t get excited though. . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x) or x**(0.5), Try complete the problem in logarithmic time. . Hint 1: Maybe you can use Binary Search to try and reduce the number of checks you have to perform? . Hint 2: Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible values? . Run the very last code segment below to load test cases and submission function . def sqrt(N): # Write your code here return None . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid(): for i in range(len(test_cases)): if sqrt(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . Check number 1 failed Check number 2 failed Check number 3 failed Check number 4 failed Check number 5 failed Check number 6 failed Check number 7 failed Check number 8 failed Check number 9 failed Check number 10 failed Check number 11 failed Check number 12 failed Check number 13 failed .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/11/29/searching-introduction.html",
            "relUrl": "/2022/11/29/searching-introduction.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Lesson2",
            "content": "",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/11/29/lesson2.html",
            "relUrl": "/2022/11/29/lesson2.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Developing Algorithms (JavaScript)",
            "content": "Review . if-else statements . Syntax: . if (condition) { } else if (condition 2) { } else { } . for loops . for (let i = number; i &lt; number; i++) { // code } . Conditionals vs Booleans . Conditionals and booleans can be equivalent. . For example, let&#39;s say there are two booleans: rainy and sunny. . Let&#39;s look at the following code: . sunny = true; rainy = false; . false . if (sunny) { umbrella = false; } else if (rainy) { umbrella = true; } else { umbrella = false; } console.log(umbrella); . false . The code above is the same as below: . umbrella = !sunny &amp;&amp; rainy; console.log(umbrella); . false . To determine if two conditionals and booleans are the same, you can substitute the four possibilities that the two booleans (sunny and rainy) can be (listed below) into the conditional and boolean and see if both cases match: . sunny = true, rainy = true . sunny = true, rainy = false . sunny = false, rainy = true . sunny = false, rainy = false . Challenge . Using JavaScript, create an algorithm that takes in an IP address and a subnet mask and computes the network address. . Overview . As we&#39;ve seen in Unit 4.1, an IP address is a 32 bit number that uniquely identifies each device. (See this for a recap). Something extra is that an IP address also comes with a subnet mask. A subnet mask is also a 32 bit number that identifies what network an IP address in in through a process that uses the bitwise AND. . In ANDing: . 0 + 0 = 0 . 0 + 1 = 0 . 1 + 0 = 0 . 1 + 1 = 1 . The following are the steps to determine the network that an IP address is in given the subnet mask: . Example: IP address: 192.168.0.1 . Subnet mask: 255.255.255.0 . Convert the IP address into binary: 192.168.0.1 -&gt; 11000000.10101000.00000000.00000001 | Convert the subnet mask into binary: 255.255.255.0 -&gt; 11111111.11111111.11111111.00000000 | Do a bitwise AND operation on the binary IP address and subnet mask: | 11000000.10101000.00000000.00000001 +11111111.11111111.11111111.00000000 =11000000.10101000.00000000.00000000 . Convert the result back to decimal: 11000000.10101000.00000000.00000000 -&gt; 192.168.0.0 | The network address is 192.168.0.0 .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/11/29/developing-algorithms-js.html",
            "relUrl": "/2022/11/29/developing-algorithms-js.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Developing Algorithms",
            "content": "Algorithms can be written in different ways and still accomplish the same tasks. Algorithms that look similar often yield differnet outputs. To solve the same problem, many different algorithms can be used. . Therefore, algorithms are very important for programmers, and today we&#39;re going to explore how to determine the outcome of algorithms, how to deteremine the output of similar algorithms, how to edit existing algorithms, and how to develop our own algorithms. . Determine the outcome of algorithms . Consider the following algorithm. . def mystery(num, num2): if (num % num2 == 0): print(&quot;True&quot;) else: print(&quot;False&quot;) mystery(20, 4) . True . What does the algorithm do? Please explain in words. | What if I put in 30 as num and 4 as num2. What would be the output? | The algorithm defines a function with two variables num and num2. Then there is an if and else statement where if num1 divded by num2 has no remainder then it will print true and if it does not it will print false. . Determine the outcome of similar algorithms . The output of this algorithm is &quot;It is too hot ouside&quot; . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . it is too hot outside . The output of this algorithm includes another line which says &quot;i will go outside&quot; . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) if (temp &gt;= 65): print(&quot;i will go outside&quot;) if (temp &lt; 65): print(&quot;it is too cold outside&quot;) . it is too hot outside i will go outside . Editing Algorithms . Task: Please edit the algorithm above to have it yield the same results as the previous algorithm! (no matter what temp you put in) . Developing Algorithms . To develop algorithms, we first need to understand what the question is asking. Then, think about how you would approach it as a human and then try to find what pattern you went through to arrive at the answer. Apply this to code, and there you have it! An algorithm! . Let&#39;s say you wanted to sum up the first five integers. How would you do this in real life? Your thought process would probably be: . The sum of the first integer is 1. | Then, increase that integer by 1. I now add 2 to my existing sum (1). My new sum is 3. | Repeat until I add 5 to my sum. The resulting sum is 15. | . Now let&#39;s translate this into code. . sum = 0 # start with a sum of 0 for i in range (1, 6): # you will repeat the process five times for integers 1-5 sum = sum + i # add the number to your sum print(sum) # print the result . 15 . Task: Write an algorithm in python that sums up the first 5 odd integers. You can use the following code as a starter. . sum = 0 counter = 1 for i in range (0, 5): sum = sum + counter counter = counter + 2 print(sum) . 25 . Homework . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from the Collatz Conjecture. The COllatz Conjecture is as follows: . start with any positive integer | if the number is even, divide by 2 | if the number is odd, multiply by 3 and add 1 | repeat steps 2 and 3 until you reach 1 | Example: if the starting number was 6, the output would be 6, 3, 10, 5, 16, 8, 4, 2, 1 .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/11/29/Developing-Algorithms.html",
            "relUrl": "/2022/11/29/Developing-Algorithms.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Nested Conditional Statements",
            "content": "if conditionA: # Code here executes when &#39;conditionA&#39; is True else: # Code that runs when &#39;conditionA&#39; is False if conditionB: # Code that runs when &#39;conditionA&#39; is False # and &#39;conditionB&#39; is True . n=int(input(&#39;Enter marks: &#39;)) # checking the conditions if n&gt;=75: if n &gt;=95: print(&#39;Excellent&#39;) else: print(&#39;Pass&#39;) else: print(&#39;Fail&#39;) . Running cells with &#39;Python 3.8.10 64-bit&#39; requires ipykernel package. Run the following command to install &#39;ipykernel&#39; into the Python environment. Command: &#39;/bin/python3 -m pip install ipykernel -U --user --force-reinstall&#39; . If Else Statements can be put inside of another if else statement using this layout for psuedo code. | . if (condition 1) if (condition 2) first block of statement else second block of statement else if (condition 3) third block of statement else fourth block of statement . Challenge: Create your own Nested Conditional, with a if statement inside the else code of an if/else statement. . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/11/28/nestedconditionals.html",
            "relUrl": "/2022/11/28/nestedconditionals.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "LessonPlanning",
            "content": "Nested Conditional Statements . Nested Conditional Statements consist of conditional statemetns within conditional statements. | Flow Chart of a Nested Conditional Statement includes: | Example for Nested Conditionals include: if conditionA: # Code here executes when ‘conditionA’ is True else: # Code that runs when ‘conditionA’ is False . if conditionB: # Code that runs when ‘conditionA’ is False # and ‘conditionB’ is True . | Example of code: age = 19 isGraduated = False hasLicense = True | . Look if person is 18 years or older . if age &gt;= 18: print(“You’re 18 or older. Welcome to adulthood!”) . if isGraduated: print(&#39;Congratulations with your graduation!&#39;) if hasLicense: print(&#39;Happy driving!&#39;) - If Else Statements can be put inside of another if else statement using this layout for psuedo code. . if (condition 1) if (condition 2) first block of statement else second block of statement else if (condition 3) third block of statement else fourth block of statement . Quick Easy Challenge .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%2013/2022/11/28/lessonplan.html",
            "relUrl": "/markdown/week%2013/2022/11/28/lessonplan.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 3 Lesson 1",
            "content": "Variables . Variables must be defined using barckers, commas, and there are different formats for every single type of format, such as string, int, and boolean | Functions on Lists: Straight brackets create a list, which can be appended. | Curly brackets are being used for interchanging variables. | An alternative of using numbers if floats which is similar to that of the numbers. | An even function occurs when | . Javascript . To define a variable one must use the variable var | Algebra can be printed throught the print command - (z + y) | Boolean is true and false which a variable can be printed around. | String is printed through the print command which quotations around it to produce the data that wants to be pritned. | . Data Abstraction . Data Abstraction manages the complexity of a program and manage the data and devolop | AP Exams are more into lists than dictionaries | To add stuff into lists one can use the command .append which adds stuff into the list | One can also break downs lists into more lists fo | Organising ites int othe lists cna be done through function names through using the | SPlitting and joining functions, | . Data Abstraction JS . Objects, Average, and values can be caluclated from data abstraction JS. | The exampe that is given is the starting lineup for Dodgers where the user made a list using straight bracketes, with both players and new players | The managers are also being put in, with also the players averages being put in. | Table syntax is put into &lt;&gt; with sr inside of it. | The style and format of the thing can be better and look more appealing if it is put into html instead of the normal activities. | . ### . Iterate through the list, and transform . albums = [ (“Welcome to my Nightmare”, “Alice Cooper”, 1975, # First album list [ (1, “Welcome to my Nightmare”), (2, “Devil’s Food”), (3, “The Black Widow”), (4, “Some Folks”), (5, “Only Women Bleed”), ] ), (“Bad Company”, “Bad Company”, 1974, # Second album list [ (1, “Can’t Get Enough”), (2, “Rock Steady”), (3, “Ready for Love”), (4, “Don’t Let Me Down”), (5, “Bad Company”), (6, “The Way I Choose”), (7, “Movin’ On”), (8, “Seagull”), ] ), (“Nightflight”, “Budgie”, 1981, [ (1, “I Turned to Stone”), (2, “Keeping a Rendezvous”), (3, “Reaper of the Glory”), (4, “She Used Me Up”), ] ), (“More Mayhem”, “Imelda May”, 2011, [ (1, “Pulling the Rug”), (2, “Psycho”), (3, “Mayhem”), (4, “Kentish Town Waltz”), ] ), . for i in albums .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%2013/2022/11/28/lesson1.html",
            "relUrl": "/markdown/week%2013/2022/11/28/lesson1.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Title",
            "content": "Homework For 1 . Explanation for Code: For the assignment code I created a list with the name of data, I then created a for loop for x in data, and then a nested conditional with multiple if and else statements . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] min_valid = 100 max_valid = 200 # Creating the for loop with if statements within it for num in range (len(data)): if data[num] &lt; 100: print(data[num], num) if data[num] &gt; 200: print(data[num], num) . 4 2 308 4 5 6 306 9 . Explanation for Code: For the second part of the assingment for my hacks I did the necessary hacks and then also added some extra albums towards the end . albums = [ (&quot;Thriller&quot;, &quot;Michael Jackson&quot;, 1979, [ (1, &quot;Thriller&quot;), (2, &quot;Based&quot;), (3, &quot;Having Fun&quot;), ] ), (&quot;Teenage Emotions&quot;, &quot;Lil Yachty&quot;, 2011, [ (1, &quot;Teenage Emotions&quot;), (2, &quot;Birthday Mix&quot;), ] ), (&quot;Birthday Mix&quot;, &quot;Lil Yackty&quot;, 2008, [ (1, &quot;THe lost Files&quot;), (2, &quot;The Big Boat&quot;), ] ), (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] album = input(&quot;enter an album number&quot;) song = input(&quot;enter a song number&quot;) print(albums[int(album) - 1][3][int(song) - 1][1]) . Keeping a Rendezvous .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/11/28/homework1.html",
            "relUrl": "/2022/11/28/homework1.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Finals Blog",
            "content": "What I Did Well . I did very good on the internet questions, because of the thoughtul notes that I took on the videos. | I also did very good code reading which I presume comes from a good background of coding | I did very good in the colloboration questions | . What I did bad in . I wasn’t very good at the binary coding and understanding the proramming methods. | Psuedo code was also pretty hard to understand, comprehend, and then answer questions based off them | I was also not very good at evaulting programs and testing them off through comprehensio questions. | . What I can do to improve . What I can do to improve is start watching vidoes on binary reading and learn how and what to do in computational programmin. | I can start to do more problems in psuedo code, to strength my knowledge of programming. | . Individual Questions that I did Wrong . Question 2: I switched up true and false in the equation | Question 20: I need to start working on bits and understanding memory | Question 21: I need to learn about binary sequences | Question 28: I exchanged variables within the question, so next time I need to be more careful | Question 30: I didn’t put in the correct benefit for list, to improve I will reasearch the benefits of using a list | Question 35: I didn’t set the maxPS based on time, to improve on this I must read the directions more carfully. | Question 36: I exchanged the evenlist or oddlist, to improve this Ihave to be mroe careful. | Question 43: I didn’t read the entire question, and I missed the block part which was supposed to be repeated | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%2012/2022/11/08/finals2.html",
            "relUrl": "/markdown/week%2012/2022/11/08/finals2.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Finals Blog",
            "content": "1st AP CSP Project that I saw . This project was made by Noor, Steven, Ederick, Alan,, and Liav | The basic overview of the program was: “A scheduling program that allows you to check the weather while displaying the eents that you want to host on a given day”. | Stuff that I liked: I really liked their idea and their aiblity to put it into fruition. | Stuff that I didn’t like: I didn’t like their API and how it kind of related with their idea. | . 2nd AP CSP Project that I saw . This project was based off the Scrum Daddys by Orlando, Ethan, Colin, and Jaden | The project uses a weather API to gather information and display it on an alternate portfolio. The information ets updated every hour and displays accurate information while having sleek design. | . 3D Arts and Animation . I reviewed over the products made rom the 3D Arts and Animations which the produced in paper. I thought that it was really interesting and colorful which makes me thing that this might be a class that I would want to do in the future. | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%2012/2022/11/04/finals.html",
            "relUrl": "/markdown/week%2012/2022/11/04/finals.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "ProjectPLanning",
            "content": "Program Purpose and Function(krishiv) . The purpose of this program is to be able to teach people about fitness and overall show how we can educate people on fitness with the people of the app. | . Data Abstraction(Prasith) . The purpose of this is to have two seperate code segments which are not connected. One should show data being stored as a list and one should show data being used in the program function. | . Managing Complexity (Shivansh) . To manage Complexity in the we will manipulate the data so it gives us the sepcifc workout plan and diet needed after a the given input. We will use use specific methods as well as abstracting it using frontend techniques to make it more user-friendly. | . Procedural Abstraction(Advay) . One parameter that affects the functionality of our procedure is our implementation of variables and inputs. These parameters allow us to take in information and use it to educate people on fitness. | . Algorithm Implementation(Dhruva) . We will use algorithms to calculate many statistics given inputs that the user provides. We will also use algorithms to create graphs and other ways to utilize the information calculated and provided for the users. | . Testing(krishiv) . The way we will make people test it is by making them use the several inputs and test our calculator, and even enter the fitness course to see who will be able to get a correct result. | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%207/2022/10/22/projectplanning.html",
            "relUrl": "/markdown/week%207/2022/10/22/projectplanning.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "ExtraCreditBothZoomMeetings",
            "content": "Extra Credit Zoom Meeting 1 . Beginning Notes: . There are two main speakers, “Suma Latha” and “Nisha Seitha”. First we talked about why Engineering is important. Here are the some reasons that were listed: Engineering can be used pretty much everywhere, and I hope that me and my peers can use the concepts of engineering to solve problems to make a positive impact in the world. They also followed a logical thought process and engineers are very important in society. Then the speakers talked about the different streams of engineering. The various streams were: electronics, Robotics, Communication, Aeronautics, Industrial, Computer Science, Mechanical, Structural, Civil Engineering, Electronics. Suma Latha took communication engineering for her stream and also focused on computer science and electronics. After User graduated the user went to a job relating communication engineering which related to computer engineering (ARozn aand Qualcom). Then we started talking about what Qualcomm is currently doing. This is the stuff that they said that are currently going on: QUALCOMM makes a lot of the mobile technoiogy and is working on 5g, qualcomm makes chips and wireless technology, mobile phone chips,Makes processors, Qualcomm creates services related to networking and wireless technology. | . Second Paragraph: . Nisha Seitha talked about her path to becoming an engineer. Choose Engineering as a factor of Father also being there. One of the only girls entered STEM at a place. Chose Engineering because she was very good at math and also chose computers because it was very rare and unique. 4 years of engineering college dreaming about a hardware engineer designer. But in the end became a software engineer. Landed 1st job in a computer science company. Worked on 3d Engineering of a comp[any then started working as a software engineer. Worked at the headquarters of the company and joined Qualcoom and worked in the 4th generation project. Right now working in the 5th generation project at Qualcomm. They also talked about the important stuff for getting into good engineering universities. Taking a lot of AP courses and making sure that GPA is very high. Also joining courses and robotics to show interest in engineering. Take advantage of any programs which can help you for engineering`. | . Conclusion Paragraph: I gained a lot of insight into engineering and computer science from the speakers in this Zoom meeting who are QUALCOMM employees. I gained knowledge about the specific projects that QUALCOMM is working on, the key ones being networking, wireless technology, and mobile technology. Additionally, I developed an awareness of engineering’s functions and international applications. I can now understand how engineering is applied in all aspects of life, from straightforward operations like setting an alarm to more complex ones like launching a rocket. It is nearly impossible to discover something that does not use engineering or computer science in some form, as they are practically ubiquitous.Additionally, with the speakers’ advice, I was capable of recognizing the path I can take to assist myself develop into a good software developer in the future, particularly working in significant IT firms like Google and QUALCOMM. This new course inspires me to put in more effort in the .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%200/2022/10/17/extracredit.html",
            "relUrl": "/markdown/week%200/2022/10/17/extracredit.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "API",
            "content": "&quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://nfl-schedule.p.rapidapi.com/v1/schedules&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;3aa60a1cb9msh07c4f9a1dcbe87bp1f7a8fjsne20cc9c3e9f1&quot;, &quot;X-RapidAPI-Host&quot;: &quot;nfl-schedule.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.json()) print(&quot;Here are the stadiums where the games are occuring at:&quot;) for sport in response.json().get(&#39;data&#39;): print(sport[&#39;venue&#39;]) print(&quot;Break&quot;) print(&quot;Here are the dates where the games are occuring:&quot;) for league in response.json().get(&#39;data&#39;): print(league[&#39;date&#39;]) print(&quot;Break&quot;) print(&quot;Here are the matchups that are occuring:&quot;) for four in response.json().get(&#39;data&#39;): print(four[&#39;name&#39;]) # score = response.json # print(&quot;Break&quot;) # print(&quot;Here are the dates where the games are occuring:&quot;) # for score in response.json().get(&#39;data&#39;): # print(score[&#39;score&#39;]) #print(sport[&#39;message&#39;]) . Here are the stadiums where the games are occuring at: Empower Field at Mile High Tottenham Hotspur Stadium Highmark Stadium FirstEnergy Stadium U.S. Bank Stadium Gillette Stadium Caesars Superdome MetLife Stadium Raymond James Stadium FedExField TIAA Bank Field Bank of America Stadium SoFi Stadium State Farm Stadium M&amp;T Bank Stadium GEHA Field at Arrowhead Stadium Break Here are the dates where the games are occuring: 2022-10-07T00:15Z 2022-10-09T13:30Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T20:05Z 2022-10-09T20:25Z 2022-10-09T20:25Z 2022-10-10T00:20Z 2022-10-11T00:15Z Break Here are the matchups that are occuring: Indianapolis Colts at Denver Broncos New York Giants at Green Bay Packers Pittsburgh Steelers at Buffalo Bills Los Angeles Chargers at Cleveland Browns Chicago Bears at Minnesota Vikings Detroit Lions at New England Patriots Seattle Seahawks at New Orleans Saints Miami Dolphins at New York Jets Atlanta Falcons at Tampa Bay Buccaneers Tennessee Titans at Washington Commanders Houston Texans at Jacksonville Jaguars San Francisco 49ers at Carolina Panthers Dallas Cowboys at Los Angeles Rams Philadelphia Eagles at Arizona Cardinals Cincinnati Bengals at Baltimore Ravens Las Vegas Raiders at Kansas City Chiefs . import getpass, sys # method to display question and get user&#39;s answers def question_with_response(prompt, qCount): print(&quot;Question &quot; + str(qCount) + &quot; : &quot; + prompt) msg = input() return msg # dictionary to hold questions and answers as key : value pairs questionsDict = {&quot;Who are the Dallas Cowboyos Playing?&quot;: &quot;Rams&quot;, &quot;Who are the Eagles playing?&quot;: &quot;Cardinals&quot;, &quot;Who are the Bengals playing?&quot;: &quot;Ravens&quot;, &quot;Who are the Raiders playing?&quot;: &quot;Chiefs&quot;, &quot;Who are the 49ers playing?&quot;: &quot;Falcons&quot;, &quot;Who are the Vikings playing?&quot;: &quot;Dolphins&quot;, &quot;Who are the Seahawks playing?&quot;: &quot;Cardinals&quot; } # number of questions as length of the dictionary questions = len(questionsDict) # set correct to 0 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print(&quot;Are you ready to take a test! Press Enter key to begin. Best of luck :)&quot;) input() questionCount = 0 # iterate over list of keys from the dictionary. pass dictionary key as question to the question_with_response function for key in questionsDict: questionCount += 1 rsp = question_with_response(key, questionCount) # compare the value from the dictionary to the user&#39;s input if rsp.lower() == questionsDict[key].lower(): print(rsp + &quot; is correct! Good Job!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! Better Luck next time.&quot;) # print final score print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # calculate percentage page = correct/questions * 100 # print percentage print(&quot;Total Percentage: &quot; + str (format(page,&quot;.2f&quot;)) + &quot;%&quot;) . Hello, shivansh running /home/shivansh/anaconda3/bin/python You will be asked 7 questions. Are you ready to take a test! Press Enter key to begin. Best of luck :) Question 1 : Who are the Dallas Cowboyos Playing? Rams is correct! Good Job! Question 2 : Who are the Eagles playing? Cardinals is correct! Good Job! Question 3 : Who are the Bengals playing? Ravens is correct! Good Job! Question 4 : Who are the Raiders playing? Chiefs is correct! Good Job! Question 5 : Who are the 49ers playing? Falcons is correct! Good Job! Question 6 : Who are the Vikings playing? Dolphins is correct! Good Job! Question 7 : Who are the Seahawks playing? Cardinals is correct! Good Job! shivansh you scored 7/7 Total Percentage: 100.00% .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter z is the 26 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) count += 1 . The letter d is the 4 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;steak&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;chicken&quot;: 2.99, &quot;special&quot;: 5.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times #item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user #print(menu[item]) price = 0 item= input(&quot;Do you want to order something&quot;) while item == &quot;yes&quot;: food = input(&quot;What do you want to eat?&quot;) if food == &quot;steak&quot;: price += 1.99 print(&quot;Successfuly bought a steak for $1.99&quot;) elif food == &quot;drink&quot;: price += .99 print(&quot;Successfully bought a drink for $.99&quot;) elif food == &quot;burger&quot;: price += 3.99 print(&quot;Successfully bought a burger for $3.99&quot;) elif food == &quot;chicken&quot;: price += 2.99 print(&quot;Successfully bought a chicken for $2.99&quot;) elif food == &quot;special&quot;: price += 5.99 print(&quot;Successfully bought a special for $5.99&quot;) else: print(&quot;There is no such option&quot;) item= input(&quot;Do you want to order something&quot;) print(price) . Menu burger $3.99 steak $1.99 drink $0.99 chicken $2.99 special $5.99 Successfully bought a special for $5.99 Successfully bought a drink for $.99 Successfully bought a special for $5.99 Successfuly bought a steak for $1.99 . TypeError Traceback (most recent call last) /home/shivansh/vscode2/Shivansh-Goel-Fast-Pages/_notebooks/2022-10-03-AP-error_testing.ipynb Cell 20 in &lt;cell line: 44&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shivansh/vscode2/Shivansh-Goel-Fast-Pages/_notebooks/2022-10-03-AP-error_testing.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; print(&#34;There is no such option&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shivansh/vscode2/Shivansh-Goel-Fast-Pages/_notebooks/2022-10-03-AP-error_testing.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=39&#39;&gt;40&lt;/a&gt; item= input(&#34;Do you want to order something&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shivansh/vscode2/Shivansh-Goel-Fast-Pages/_notebooks/2022-10-03-AP-error_testing.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=43&#39;&gt;44&lt;/a&gt; print(&#34;$ &#34; + price) TypeError: can only concatenate str (not &#34;float&#34;) to str . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "TestPrep(3 Quizes)",
            "content": "Proof that I took the 3 quizes . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%206/2022/09/30/Testprep.html",
            "relUrl": "/markdown/week%206/2022/09/30/Testprep.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "JavascriptNotes Colloboration",
            "content": "Stuff we talked about . Krishiv: . To create a table, we have to first define a function containing specific variables. | We also have to define a JSON method asscoitiated with the function that we have created. | All the variables that are in the “constructor” must be defined if they are included in the funcion | . Shivansh: . To add objects or instances of the function we have to use the “var” variable | To add multiople objects or instances of the function we can use an array which stores multiple lists | In the end we also set a html function, in my case compsci.html | . Complete: . To finish off the function we must write in html to produce a table | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%205/2022/09/26/javascriptnotes.html",
            "relUrl": "/markdown/week%205/2022/09/26/javascriptnotes.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Brainstorm - Week 5",
            "content": "Project 1 Ideas . MAIN APP: Fitness Based Log . Idea An App To Show A person’s fitness journey and overall progress toward there goals Elements For people to log their fitness goals and progress Max Heart Rate Calorie counter BMI calculator Plan for future goals Dietary Advice Resources for fitness Fitness Quiz Water Log | . | . Program Purpose: . The purpose we will use in our app will be able to give an output through a person input, using arrays, lists, if else and other elements of code. | . SCRUM team role . My team and I decided on the following roles: . Prasith: Backend Krishiv: Scrum Master Shivansh: Frontend Dhruva: Backend Advay: Devops . As Frontend I will make sure that our code is displayed to its best . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%204/2022/09/25/grouporganized.html",
            "relUrl": "/markdown/week%204/2022/09/25/grouporganized.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Code.org Quiz",
            "content": "The thoughts and ideas before creating the quiz . We decided to create a quiz about a video game | We reviewed the incomplete program given and we figuredo that we should add something which would tell if one got the answer wrong | . Quiz Creation . The onEvent function will be used and the variable used will be console.log: “message” | . During or After finished the quiz . Trying for loops was very difficult | Initiliazing a variable wasn’t working until we set it as a global variable | If, else if, and else statements came in handy in the scoring process | . Stuff which I did differnet than normal quiz . I added if, else if, and else statements to add up the points | I added pictures and transitions | I also added audio to the clip if one got it correct | link to the quiz: https://studio.code.org/projects/applab/7CbDivekQhy604GMl1L-g90DV9CtQBdsoT7uJl0f5iM/edit | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%204/2022/09/22/codequiz.html",
            "relUrl": "/markdown/week%204/2022/09/22/codequiz.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Collaboration CSP Notes",
            "content": "1.1 . Effective collobaration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it. | Collobaration that includes diverse perspectives helps avoid bias in the development of computing innovations. | Effective colloborative teams practice interspersonal skills, including, but not limited to: Communiation | Consenseus Building | Conflict Resolution | Negotiation | . | A Computing innovation includes a program as an integral part of its function. | A computing innovation can be physical, nonpyhysical computing osftware, or a nonphysical computing concept (e-commerce). | Collobarations that inclues diverse perspectives helps avoid bias in the development of computing innovations. | African Proverb: “If you want to go fast, go alone. If you want to go far, go together.” . | Essential Knowledge Consultation and communication with users are important aspects of the development of computing innovations | Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives and to develop a program that fully incorporates these perspectives | Online tools support collobaration by allowing programmers to share and provide feedback on ideas and doucmentws | Common models such as pair programming exist to facilitate collaboration. | . | Pair Programming: Two programmers work together as a pair. One (the driver) writes program code, while the other review each line of program code as it is typed in. | Think - Pair - Share: Students think through a problem alone, pair with a partner to share ideas, and then share with the rest of the class. | Make sure to leave comments in code | Online tools: (repl.it, Github) | . 1.2 . What I will learn The essential about computing innovations The purpose of computing innovations What are Computing Innovations Aplications like games and social media Physical devices like computers and cell phones Systems like email, ecommerce and cloud services Innovations solve problems Video 2 What I will learn The inputs and outputs of a program Data of the outputs related to that program Types of input Touch Audio Visual Text/numerical values Event Driven Enviornments Most programs have event driven environments Mouse clicks Swipes Button click Keyboard clicks Audio trigger Video 3 What I will Learn I will learn the functions of a program What is a Program A program is a single command | . 1.3 . Video 1.3.1 . How is a program developed . it is developed with an IdeaT | Then the problem it was based on is investigated | Also we have to talk about constraints | Observation w surveys | Plan Out design and organize tasks | Make prototypes and test | . | . Video 1.3.2 . Acknowledging Code Segments . It is important to acknowledge code actors Program isnt solo Each member deserves to get credit for their work and contributions Names must be written in documentation of the program When there is a problem the people who developed it can fix it Even though they might not be apart of the project they deserve to be credited . Video 1.3.3 . How developments are created . -Programers use documentation and other things to describe the function of the program . documentation is important because it makes you more efficient and it makes sense when you need to look back at what you did Comments are used with a # in python and a // in java .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%204/2022/09/22/CSPnotes.html",
            "relUrl": "/markdown/week%204/2022/09/22/CSPnotes.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Week 4 - Extra hacks",
            "content": "import getpass, sys # method to display question and get user&#39;s answers def question_with_response(prompt, qCount): print(&quot;Question &quot; + str(qCount) + &quot; : &quot; + prompt) msg = input() return msg # dictionary to hold questions and answers as key : value pairs questionsDict = {&quot;Is my group setup strictly on the basis of current friends and common interests? (Answer yes/no)&quot;: &quot;yes&quot;, &quot;Is my group setup with diversity in backgrounds, gender, and perspectives?(Answer yes/no)&quot;: &quot;yes&quot;, &quot;Is my group best equipped for the skill sets needed for success in classroom?(Answer yes/no)&quot;: &quot;yes&quot; } # number of questions as length of the dictionary questions = len(questionsDict) # set correct to 0 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print(&quot;Are you ready to take a test! Press Enter key to begin. Best of luck :)&quot;) input() questionCount = 0 # iterate over list of keys from the dictionary. pass dictionary key as question to the question_with_response function for key in questionsDict: questionCount += 1 rsp = question_with_response(key, questionCount) # compare the value from the dictionary to the user&#39;s input if rsp.lower() == questionsDict[key].lower(): print(rsp + &quot; is correct! Good Job!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! Better Luck next time.&quot;) # print final score print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # calculate percentage page = correct/questions * 100 # print percentage print(&quot;Total Perycentage: &quot; + str (format(page,&quot;.2f&quot;)) + &quot;%&quot;) #Editing . Hello, shivansh running /bin/python3 You will be asked 3 questions. Are you ready to take a test! Press Enter key to begin. Best of luck :) Question 1 : Is my group setup strictly on the basis of current friends and common interests? (Answer yes/no) is incorrect! Better Luck next time. Question 2 : Is my group setup with diversity in backgrounds, gender, and perspectives?(Answer yes/no) yes is correct! Good Job! Question 3 : Is my group best equipped for the skill sets needed for success in classroom?(Answer yes/no) yes is correct! Good Job! shivansh you scored 2/3 Total Percentage: 66.67% .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/09/13/week4.html",
            "relUrl": "/2022/09/13/week4.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Preformance Task",
            "content": "",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%203/2022/09/09/preformancetask.html",
            "relUrl": "/bash/week%203/2022/09/09/preformancetask.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Javascript - Week 5 Hacks",
            "content": "// define a function to hold data for a Contender function Contender(name, money, championships) { this.name = name; this.money = money; this.championships = championships; this.role = &quot;&quot;; } // define a setter for role in Contender data Contender.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Contender Contender.prototype.toJSON = function() { const obj = {name: this.name, money: this.money, championships: this.championships, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Contender and assign to variable ultimatechampion var ultimatechampion = new Contender(&quot;Dolphins&quot;, &quot;10.1B&quot;, 1000); // object type is easy to work with in JavaScript logItType(ultimatechampion); // before role logItType(ultimatechampion.toJSON()); ultimatechampion.setRole(&quot;ultimatechampion&quot;); logItType(ultimatechampion); logItType(ultimatechampion.toJSON()); . object ; Contender { name: &#39;Dolphins&#39;, money: &#39;10.1B&#39;, championships: 1000, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Dolphins&#34;,&#34;money&#34;:&#34;10.1B&#34;,&#34;championships&#34;:1000,&#34;role&#34;:&#34;&#34;} object ; Contender { name: &#39;Dolphins&#39;, money: &#39;10.1B&#39;, championships: 1000, role: &#39;ultimatechampion&#39; } string ; {&#34;name&#34;:&#34;Dolphins&#34;,&#34;money&#34;:&#34;10.1B&#34;,&#34;championships&#34;:1000,&#34;role&#34;:&#34;ultimatechampion&#34;} . var poverty = [ new Contender(&quot;Cheifs&quot;, &quot;5.4B&quot;, 2019), new Contender(&quot;Packers&quot;, &quot;4.1B&quot;, 2008), new Contender(&quot;Warriors&quot;, &quot;5.2B&quot;, 20122), new Contender(&quot;Bears&quot;, &quot;3.4B&quot;, 2014), new Contender(&quot;Ravens&quot;, &quot;1.7B&quot;, 1995), new Contender(&quot;Bengals&quot;, &quot;2.7B&quot;, 2021) ]; function League(ultimatechampion, poverty){ ultimatechampion.setRole(&quot;ultimatechampion&quot;); this.ultimatechampion = ultimatechampion; this.League = [ultimatechampion]; this.poverty = poverty; this.poverty.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.League.push(student); }); this.json = []; this.League.forEach(Contender =&gt; this.json.push(Contender.toJSON())); } compsci = new League(ultimatechampion, poverty); logItType(compsci.League); logItType(compsci.League[0].name); logItType(compsci.json[0]); logItType(JSON.parse(compsci.json[0])); . object ; [ Contender { name: &#39;Dolphins&#39;, money: &#39;10.1B&#39;, championships: 1000, role: &#39;ultimatechampion&#39; }, Contender { name: &#39;Cheifs&#39;, money: &#39;5.4B&#39;, championships: 2019, role: &#39;Student&#39; }, Contender { name: &#39;Packers&#39;, money: &#39;4.1B&#39;, championships: 2008, role: &#39;Student&#39; }, Contender { name: &#39;Warriors&#39;, money: &#39;5.2B&#39;, championships: 20122, role: &#39;Student&#39; }, Contender { name: &#39;Bears&#39;, money: &#39;3.4B&#39;, championships: 2014, role: &#39;Student&#39; }, Contender { name: &#39;Ravens&#39;, money: &#39;1.7B&#39;, championships: 1995, role: &#39;Student&#39; }, Contender { name: &#39;Bengals&#39;, money: &#39;2.7B&#39;, championships: 2021, role: &#39;Student&#39; } ] string ; Dolphins string ; {&#34;name&#34;:&#34;Dolphins&#34;,&#34;money&#34;:&#34;10.1B&#34;,&#34;championships&#34;:1000,&#34;role&#34;:&#34;ultimatechampion&#34;} object ; { name: &#39;Dolphins&#39;, money: &#39;10.1B&#39;, championships: 1000, role: &#39;ultimatechampion&#39; } . import getpass, sys # method to display question and get user&#39;s answers def question_with_response(prompt, qCount): print(&quot;Question &quot; + str(qCount) + &quot; : &quot; + prompt) msg = input() return msg # dictionary to hold questions and answers as key : value pairs questionsDict = {&quot;How much money does the Chiefs have&quot;: &quot;10.1B&quot;, &quot;How much money does the Chiefs have&quot;: &quot;5.4B&quot;, &quot;How much money does the Packers have&quot;: &quot;4.1B&quot;, &quot;How much money does the warriors have?&quot;: &quot;5.2B&quot;, &quot;How much money does the Bears have? &quot;: &quot;3.4B&quot;, &quot;How much money does the Ravens have?&quot;: &quot;1.7B&quot;, &quot;How much money does the Bengals have?&quot;: &quot;2.7B&quot; } # number of questions as length of the dictionary questions = len(questionsDict) # set correct to 0 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print(&quot;Are you ready to take a test! Press Enter key to begin. Best of luck :)&quot;) input() questionCount = 0 # iterate over list of keys from the dictionary. pass dictionary key as question to the question_with_response function for key in questionsDict: questionCount += 1 rsp = question_with_response(key, questionCount) # compare the value from the dictionary to the user&#39;s input if rsp.lower() == questionsDict[key].lower(): print(rsp + &quot; is correct! Good Job!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! Better Luck next time.&quot;) # print final score print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # calculate percentage page = correct/questions * 100 # print percentage print(&quot;Total Percentage: &quot; + str (format(page,&quot;.2f&quot;)) + &quot;%&quot;) . Hello, shivansh running /home/shivansh/anaconda3/bin/python You will be asked 6 questions. Are you ready to take a test! Press Enter key to begin. Best of luck :) Question 1 : How much money does the Chiefs have 5.4B is correct! Good Job! Question 2 : How much money does the Packers have 5.4B is incorrect! Better Luck next time. Question 3 : How much money does the warriors have? 3.1 is incorrect! Better Luck next time. Question 4 : How much money does the Bears have? 4.5B is incorrect! Better Luck next time. Question 5 : How much money does the Ravens have? 5.2B is incorrect! Better Luck next time. Question 6 : How much money does the Bengals have? 3.4B is incorrect! Better Luck next time. shivansh you scored 1/6 Total Percentage: 16.67% . League.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Money&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Championships&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of compsci.League) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.money + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.championships + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(compsci._toHtml()); . NameMoneyChampionships . Dolphins | 10.1B | 1000 | Cheifs | 5.4B | 2019 | Packers | 4.1B | 2008 | Warriors | 5.2B | 20122 | Bears | 3.4B | 2014 | Ravens | 1.7B | 1995 | Bengals | 2.7B | 2021 | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%205/2022/09/05/javascriptocode.html",
            "relUrl": "/bash/week%205/2022/09/05/javascriptocode.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Time Box Fragments",
            "content": "Shivansh Goel Time Box Fragments . Here are the time box fragments organized by weeks . Week 0 | Installing WSL | Installing Jupyter Notebook and Python | Installing VScode | . Week 1 | Python Quiz | Bash Tutorial | Editing index.html | . Week 2 | Lists and Dictionaries | HTML Fragments |   | . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%202/2022/08/31/tables.html",
            "relUrl": "/markdown/week%202/2022/08/31/tables.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Reporting theme changes",
            "content": "Here is the bad stuff that happened . Note: The following image is inserted using a Jekyll Liquid Filter for relative URL . All the pages, the links on the right top side were removed thus removing an integral part of the blog. | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%202/2022/08/31/Bloggingchanges.html",
            "relUrl": "/markdown/week%202/2022/08/31/Bloggingchanges.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "This is Week 3 Hacks Python Lists",
            "content": "InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Shivansh&quot;, &quot;LastName&quot;: &quot;Goel&quot;, &quot;DOB&quot;: &quot;October 29 2007&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;EMail&quot;: &quot;shivanshggamer@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Red Bugatti&quot;, &quot;Yellow Bugatti&quot;, &quot;Orange Bugatti&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Joe&quot;, &quot;LastName&quot;: &quot;Mama&quot;, &quot;DOB&quot;: &quot;July 4&quot;, &quot;Residence&quot;: &quot;New York&quot;, &quot;Email&quot;: &quot;joemama@yahoo.com&quot;, &quot;Owns_Cars&quot;: [&quot;Lamborhini&quot;] }) . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # Print the data structure def for_loop(InfoDb): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop(InfoDb) . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Shivansh Goel Residence: San Diego Birth Day: October 29 2007 Cars: Red Bugatti, Yellow Bugatti, Orange Bugatti Joe Mama Residence: New York Birth Day: July 4 Cars: Lamborhini . def PythonQuiz(prompt): global word print (&quot;Question: &quot; + prompt) word = input() return word questions_number = 5 correct_answer = 0 print(&quot;Hello, you will be asked &quot; + str(questions_number) + &quot; questions you should know.&quot;) TheQuiz=[] TheQuiz.append({ &quot;What value is a dozen&quot;: &quot;12&quot;, &quot;How many days are in a year&quot;: &quot;365&quot;, &quot;How many years are in a decade&quot;: &quot;10&quot;, &quot;How much eggs are too much&quot;: &quot;5&quot;, &quot;What is the main measurment for distance in USA&quot;: &quot;mile&quot;, }) for dict in TheQuiz: for questions, answers in dict.items(): PythonQuiz(questions) if word == answers: print(input() + &quot; is correct&quot;) correct_answer += 1 else: print(input() +&quot; is incorrect&quot;) print(&quot;You scored &quot; + str(correct_answer) + &quot;/&quot; + str(questions_number) + &quot;. Good Job!&quot;) . Hello, you will be asked 5 questions you should know. Question: What value is a dozen 365 is correct Question: How many days are in a year 5 is incorrect Question: How many years are in a decade 5 is incorrect Question: How much eggs are too much 5 is correct Question: What is the main measurment for distance in USA mile is correct You scored 3/5. Good Job! . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Shivansh Goel Residence: San Diego Birth Day: October 29 2007 Cars: Red Bugatti, Yellow Bugatti, Orange Bugatti Joe Mama Residence: New York Birth Day: July 4 Cars: Lamborhini .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%202/2022/08/30/pythonlists.html",
            "relUrl": "/bash/week%202/2022/08/30/pythonlists.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Alumni Panel Notes",
            "content": "Alumni Panel Notes . Introduction . Mostly all graduates to UCs | Some of them are not majoring in computer science | . Question 1: Biggest Challenge in Computer Science? . Keeping motivation | A lot of problems and hard to find on the internet | Focus on your own path and try to not to compare with others | Try to ignore clashing egos | Hard finding motivation because of smarter people | Have a better mindset to learn instead of just trying to get stuff down | Getting started in coding is very hard | . Question 2: Are there any PBL scenarios in college computer science classes? . There are 2 PBL scenarios in college. 1 of them is defineftly in senior year Project based learning classes and some theory based classes. | There are a lot of PBL exams which are definite for computer silence | A lot of group based and managing group. Be Careful of getting used for doing too much group work. | Be good at managing work | . Question 3: Have you applied CS in your major if you are not majoring in CS? . There is a lot of coding involved in mechanical engineering which will help you out a lot. | Optimizing things are also very well used in a lot of different majors | Computer science can help with very high level math | A lot of requirements in Stats courses and psychology courses need some type of Computer Science | Programming is almost everywhere in a lot of STEM majors | . Question 4: For existing college students have you had a job with school or professor? . Getting internships and talking to professors will help get better jobs. | Try to be unique from the 200 other students in the college lecture | 2 of the alumnis had Internships in Northrop Grumman | 1 of the alumni had Internships in a company doing APIs and web development | . Other Questions: . Doing 2 or 3 personal projects will help out with applying for internships and stuff Path finding algorithms (Graph Theory, etc) a lot of data visualization | Doing a lot of data application in projects and classes | Club called Trident A in UCSD | When trying to apply for internships always have a resume | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%201/2022/08/29/Alumni.html",
            "relUrl": "/markdown/week%201/2022/08/29/Alumni.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Shivansh's Bash Tutorial Hacks",
            "content": "Setup project local folders . Create / verify local folders exist | Clone / update github repository | . echo &quot;Setting up local folders&quot; export project_dir=$HOME/vscode_shivansh # setting local project folders in vscode_shivansh export project=$project_dir/Shivansh-Goel-Fast-Pages # my git repository will be cloned here export project_repo=&quot;https://github.com/deadshotlegend/Shivansh-Goel-Fast-Pages.git&quot; # my project cd ~ # start in home directory # Check if project directory exists. If not, create one if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... making directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Check if the project directory exists. If exists, then the project was cloned before, and hence # need to updated. If not exists, then the project hasn&#39;t been cloned yet, and I must clone now if [ ! -d $project ] then echo &quot;Git Project directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ else echo &quot;Git Project directory $project exists... pulling $project_repo&quot; cd $project git pull origin master echo &quot;$project_repo successfully updated from origin&quot; cd ~ fi echo &quot;Project directory $project successfuly cloned / updated.&quot; . Setting up local folders Directory /home/shivansh/vscode_shivansh exists. Git Project directory /home/shivansh/vscode_shivansh/Shivansh-Goel-Fast-Pages exists... pulling https://github.com/deadshotlegend/Shivansh-Goel-Fast-Pages.git From https://github.com/deadshotlegend/Shivansh-Goel-Fast-Pages * branch master -&gt; FETCH_HEAD Already up to date. https://github.com/deadshotlegend/Shivansh-Goel-Fast-Pages.git successfully updated from origin Project directory /home/shivansh/vscode_shivansh/Shivansh-Goel-Fast-Pages successfuly cloned / updated. . Validate necessary kernels exists . Javascript | Bash | Python3 | . jupyter kernelspec list &gt; /tmp/kernellist.txt python_exists=`awk &#39;$1 == &quot;python3&quot; { print $2 }&#39; /tmp/kernellist.txt` if [ &quot;&quot; != $python_exists ] then echo &quot;Python Kernel Exists at $python_exists&quot; else echo &quot;Python Kernel Does Not Exist&quot; fi bash_exists=`awk &#39;$1 == &quot;bash&quot; { print $2 }&#39; /tmp/kernellist.txt` if [ &quot;&quot; != $bash_exists ] then echo &quot;Bash Kernel Exists at $bash_exists&quot; else echo &quot;Bash Kernel Does Not Exist&quot; fi javascript_exists=`awk &#39;$1 == &quot;javascript&quot; { print $2 }&#39; /tmp/kernellist.txt` if [ &quot;&quot; != $javascript_exists ] then echo &quot;Javascript Kernel Exists at $javascript_exists&quot; else echo &quot;Javascript Kernel Does Not Exist&quot; fi . Python Kernel Exists at /home/shivansh/.local/share/jupyter/kernels/python3 Bash Kernel Exists at /home/shivansh/.local/share/jupyter/kernels/bash Javascript Kernel Exists at /home/shivansh/.local/share/jupyter/kernels/javascript . . categories: [Notebooks] . Validate necessary packages exist . python | ipykernel | bash-kernel | jupyter | more can be added to package_to_validate in script below | . package_list=/tmp/packagelist.txt if [[ ! -f $package_list ]] then conda list -n base &gt; $package_list fi package_to_validate=(python ipykernel bash-kernel jupyter) for pname in &quot;${package_to_validate[@]}&quot; do p_ver=`awk &#39;$1 == pname { print $2 }&#39; pname=$pname /tmp/packagelist.txt` if [ &quot;$p_ver&quot; == &quot;&quot; ] then echo &quot;$pname not installed&quot; else echo &quot;$pname installed with version $p_ver&quot; fi done . python installed with version 3.9.12 ipykernel installed with version 6.9.1 bash-kernel installed with version 0.8.0 jupyter installed with version 1.0.0 .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%201/2022/08/28/ShivanshBashTutorial.html",
            "relUrl": "/bash/week%201/2022/08/28/ShivanshBashTutorial.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "This is the personalized quiz for Week 2 Hacks",
            "content": "My Hacks . I have removed the repeating questions and anwers with a iterative contruct using dictionaries | Added more questions of my own and also calculated a percentage at the end. | Lastly, I have made the answer check case insensitive. | . import getpass, sys # method to display question and get user&#39;s answers def question_with_response(prompt, qCount): print(&quot;Question &quot; + str(qCount) + &quot; : &quot; + prompt) msg = input() return msg # dictionary to hold questions and answers as key : value pairs questionsDict = {&quot;What command is used to include other functions that were previously developed?&quot;: &quot;import&quot;, &quot;What command in this example is used to evaluate a response?&quot;: &quot;if&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;: &quot;expression&quot;, &quot;What does Jupyter Notebooks use?&quot;: &quot;python&quot;, &quot;What is the end of the file name of Mark Down Post?&quot;: &quot;.md&quot;, &quot;What kernel does one need to use to use python?&quot;: &quot;ipykernel&quot;, &quot;What command in terminal allows one to switch directory?&quot;: &quot;cd&quot; } # number of questions as length of the dictionary questions = len(questionsDict) # set correct to 0 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print(&quot;Are you ready to take a test! Press Enter key to begin. Best of luck :)&quot;) input() questionCount = 0 # iterate over list of keys from the dictionary. pass dictionary key as question to the question_with_response function for key in questionsDict: questionCount += 1 rsp = question_with_response(key, questionCount) # compare the value from the dictionary to the user&#39;s input if rsp.lower() == questionsDict[key].lower(): print(rsp + &quot; is correct! Good Job!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! Better Luck next time.&quot;) # print final score print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # calculate percentage page = correct/questions * 100 # print percentage print(&quot;Total Percentage: &quot; + str (format(page,&quot;.2f&quot;)) + &quot;%&quot;) . Hello, shivansh running /bin/python3 You will be asked 7 questions. Are you ready to take a test! Press Enter key to begin. Best of luck :) Question 1 : What command is used to include other functions that were previously developed? import is correct! Good Job! Question 2 : What command in this example is used to evaluate a response? if is correct! Good Job! Question 3 : Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Good Job! Question 4 : What does Jupyter Notebooks use? python is correct! Good Job! Question 5 : What is the end of the file name of Mark Down Post? .md is correct! Good Job! Question 6 : What kernel does one need to use to use python? ipykernel is correct! Good Job! Question 7 : What command in terminal allows one to switch directory? cd is correct! Good Job! shivansh you scored 7/7 Total Percentage: 100.00% .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%201/2022/08/25/personalizedquiz.html",
            "relUrl": "/bash/week%201/2022/08/25/personalizedquiz.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Shivansh Docx Personalized",
            "content": "Stuff that I like to do: . I like to study the subjects for my school . | I like to code and have fun with computers . | I like to play sports . | I like to play video games . | . Stuff that I want to improve this year . I want to improve in my overall education . | I want to get more fit and healthy than last year . | I want to expand my hobbies and try out new stuff this year . | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/08/25/Shivansh-docx-personalized.html",
            "relUrl": "/2022/08/25/Shivansh-docx-personalized.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Shivansh's personalized page",
            "content": "Personal Study and Work Pages . Goal for using this page . Useful for connecting notes | Useufl transporting and using code | Help monitor and instantiate content | . . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%201/2022/08/24/secondmarkdown.html",
            "relUrl": "/markdown/week%201/2022/08/24/secondmarkdown.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Shivansh Goel's First Python Code and use of Jupyter Notebook",
            "content": "print(&quot;Hello, world!&quot;) . Hello, world! .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%201/2022/08/21/ShivanshJupyter.html",
            "relUrl": "/bash/week%201/2022/08/21/ShivanshJupyter.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Shivansh's first Markdown Post",
            "content": "Shivansh Goel Mark Down Post . Goals For CSP this year: . Become better at coding | Learn the various computer languages | Become better with websites and computers | Changin for Dokcer Changing for Docker agains | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%200/2022/08/21/Shivansh.html",
            "relUrl": "/markdown/week%200/2022/08/21/Shivansh.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "PBL Binary File",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%2013/2022/07/07/PBL-binary.html",
            "relUrl": "/markdown/week%2013/2022/07/07/PBL-binary.html",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello, I am Shivansh Goel and part of APCSP period 5. . I am in 10th grade at Del Norte High School. I am learning Python programming and currently having fun with editing pages using Jupyter and GitHub and Markdown :sunglasses: . The following image is inserted using a Jekyll Liquid Filter for relative URL .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "APCSP Vocabulary",
          "content": "This APCSP Notes: . def = define a function | import = importing other function for uses | cd = change directory | . .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/b-vocab/",
          "relUrl": "/b-vocab/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Submenu",
          "content": "&lt;!Doctype html&gt; . My first Table . What I have learned from APCSP . API . This is my api | . .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "APCSP Notes",
          "content": "This is the notes for Shivansh Goel: . Week 1 . print function: A way to print meassages in python | If else statement, if is a certain condition and it will produce the stuff inside the code if the condition is met | . Week 2 . lists and dictionaries: ways to put sequence of elements using python code | loops: A way to replay the function when a certain condition is being met (true or false) | . Week 3/4/5 . Learning about Javascript and code.org | In javascript we learned how to create functions. | .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Personalized Study",
          "content": "Find assingments on these links and edit them here: Link to Canas: https://poway.instructure.com/ Link to myplan: https://launchpad.classlink.com/poway Link to GoogleDrive: https://www.google.com/drive/ .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/personalstudy/",
          "relUrl": "/personalstudy/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}