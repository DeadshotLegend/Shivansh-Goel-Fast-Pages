{
  
    
        "post0": {
            "title": "ProjectPLanning",
            "content": "Program Purpose and Function(krishiv) . The purpose of this program is to be able to teach people about fitness and overall show how we can educate people on fitness with the people of the app. | . Data Abstraction(Prasith) . The purpose of this is to have two seperate code segments which are not connected. One should show data being stored as a list and one should show data being used in the program function. | . Managing Complexity (Shivansh) . To manage Complexity in the we will manipulate the data so it gives us the sepcifc workout plan and diet needed after a the given input. We will use use specific methods as well as abstracting it using frontend techniques to make it more user-friendly. | . Procedural Abstraction(Advay) . One parameter that affects the functionality of our procedure is our implementation of variables and inputs. These parameters allow us to take in information and use it to educate people on fitness. | . Algorithm Implementation(Dhruva) . We will use algorithms to calculate many statistics given inputs that the user provides. We will also use algorithms to create graphs and other ways to utilize the information calculated and provided for the users. | . Testing(krishiv) . The way we will make people test it is by making them use the several inputs and test our calculator, and even enter the fitness course to see who will be able to get a correct result. | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%207/2022/10/22/projectplanning.html",
            "relUrl": "/markdown/week%207/2022/10/22/projectplanning.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "API",
            "content": "&quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://nfl-schedule.p.rapidapi.com/v1/schedules&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;3aa60a1cb9msh07c4f9a1dcbe87bp1f7a8fjsne20cc9c3e9f1&quot;, &quot;X-RapidAPI-Host&quot;: &quot;nfl-schedule.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.json()) print(&quot;Here are the stadiums where the games are occuring at:&quot;) for sport in response.json().get(&#39;data&#39;): print(sport[&#39;venue&#39;]) print(&quot;Break&quot;) print(&quot;Here are the dates where the games are occuring:&quot;) for league in response.json().get(&#39;data&#39;): print(league[&#39;date&#39;]) print(&quot;Break&quot;) print(&quot;Here are the matchups that are occuring:&quot;) for four in response.json().get(&#39;data&#39;): print(four[&#39;name&#39;]) # score = response.json # print(&quot;Break&quot;) # print(&quot;Here are the dates where the games are occuring:&quot;) # for score in response.json().get(&#39;data&#39;): # print(score[&#39;score&#39;]) #print(sport[&#39;message&#39;]) . Here are the stadiums where the games are occuring at: Empower Field at Mile High Tottenham Hotspur Stadium Highmark Stadium FirstEnergy Stadium U.S. Bank Stadium Gillette Stadium Caesars Superdome MetLife Stadium Raymond James Stadium FedExField TIAA Bank Field Bank of America Stadium SoFi Stadium State Farm Stadium M&amp;T Bank Stadium GEHA Field at Arrowhead Stadium Break Here are the dates where the games are occuring: 2022-10-07T00:15Z 2022-10-09T13:30Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T17:00Z 2022-10-09T20:05Z 2022-10-09T20:25Z 2022-10-09T20:25Z 2022-10-10T00:20Z 2022-10-11T00:15Z Break Here are the matchups that are occuring: Indianapolis Colts at Denver Broncos New York Giants at Green Bay Packers Pittsburgh Steelers at Buffalo Bills Los Angeles Chargers at Cleveland Browns Chicago Bears at Minnesota Vikings Detroit Lions at New England Patriots Seattle Seahawks at New Orleans Saints Miami Dolphins at New York Jets Atlanta Falcons at Tampa Bay Buccaneers Tennessee Titans at Washington Commanders Houston Texans at Jacksonville Jaguars San Francisco 49ers at Carolina Panthers Dallas Cowboys at Los Angeles Rams Philadelphia Eagles at Arizona Cardinals Cincinnati Bengals at Baltimore Ravens Las Vegas Raiders at Kansas City Chiefs . import getpass, sys # method to display question and get user&#39;s answers def question_with_response(prompt, qCount): print(&quot;Question &quot; + str(qCount) + &quot; : &quot; + prompt) msg = input() return msg # dictionary to hold questions and answers as key : value pairs questionsDict = {&quot;When is the Cheifs vs Raiders Game?&quot;: &quot;10/10/2022&quot;, &quot;When is the Ravens vs Giants game?&quot;: &quot;10/16/2022&quot;, &quot;When is the Jaguars vs Colts game?&quot;: &quot;10/16/2022&quot;, &quot;When is the Patriots vs Browns game?&quot;: &quot;10/16/2022&quot;, &quot;When is the 49ers vs Falcons game?&quot;: &quot;10/16/2022&quot;, &quot;When is the Viking vs Dolphins game?&quot;: &quot;10/16/2022&quot;, &quot;When is the Cardinals vs Seahawks game?&quot;: &quot;10/16/2022&quot; } # number of questions as length of the dictionary questions = len(questionsDict) # set correct to 0 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print(&quot;Are you ready to take a test! Press Enter key to begin. Best of luck :)&quot;) input() questionCount = 0 # iterate over list of keys from the dictionary. pass dictionary key as question to the question_with_response function for key in questionsDict: questionCount += 1 rsp = question_with_response(key, questionCount) # compare the value from the dictionary to the user&#39;s input if rsp.lower() == questionsDict[key].lower(): print(rsp + &quot; is correct! Good Job!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! Better Luck next time.&quot;) # print final score print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # calculate percentage page = correct/questions * 100 # print percentage print(&quot;Total Percentage: &quot; + str (format(page,&quot;.2f&quot;)) + &quot;%&quot;) . Hello, shivansh running /home/shivansh/anaconda3/bin/python You will be asked 7 questions. Are you ready to take a test! Press Enter key to begin. Best of luck :) Question 1 : When is the Cheifs vs Raiders Game? 10/10/2022 is correct! Good Job! Question 2 : When is the Ravens vs Giants game? 10/16/2022 is correct! Good Job! Question 3 : When is the Jaguars vs Colts game? 10/16/2022 is correct! Good Job! Question 4 : When is the Patriots vs Browns game? 10/16/2022 is correct! Good Job! Question 5 : When is the 49ers vs Falcons game? 10/16/2022 is correct! Good Job! Question 6 : When is the Viking vs Dolphins game? 10/16/2022 is correct! Good Job! Question 7 : When is the Cardinals vs Seahawks game? 10/16/2022 is correct! Good Job! shivansh you scored 7/7 Total Percentage: 100.00% .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter z is the 26 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) count += 1 . The letter d is the 4 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;steak&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times #item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user #print(menu[item]) points= 0 price = 0 item= input(&quot;Do you want to order something&quot;) while item == &quot;yes&quot;: food = input(&quot;What do you want to eat?&quot;) if food == &quot;steak&quot;: price += 1.99 print(&quot;Successfuly bought a steak for $1.99&quot;) elif food == &quot;drink&quot;: price += .99 print(&quot;Successfully bought a drink for $.99&quot;) elif food == &quot;burger&quot;: price += 3.99 print(&quot;Successfully bought a burger for $3.99&quot;) else: print(&quot;There is no such option&quot;) item= input(&quot;Do you want to order something&quot;) print(price) . Menu burger $3.99 steak $1.99 drink $0.99 Successfully bought a burger for $3.99 Successfully bought a burger for $3.99 Successfully bought a burger for $3.99 11.97 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "TestPrep(3 Quizes)",
            "content": "Proof that I took the 3 quizes . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%206/2022/09/30/Testprep.html",
            "relUrl": "/markdown/week%206/2022/09/30/Testprep.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "JavascriptNotes Colloboration",
            "content": "Stuff we talked about . Krishiv: . To create a table, we have to first define a function containing specific variables. | We also have to define a JSON method asscoitiated with the function that we have created. | All the variables that are in the “constructor” must be defined if they are included in the funcion | . Shivansh: . To add objects or instances of the function we have to use the “var” variable | To add multiople objects or instances of the function we can use an array which stores multiple lists | In the end we also set a html function, in my case compsci.html | . Complete: . To finish off the function we must write in html to produce a table | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%205/2022/09/26/javascriptnotes.html",
            "relUrl": "/markdown/week%205/2022/09/26/javascriptnotes.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Brainstorm - Week 5",
            "content": "Project 1 Ideas . MAIN APP: Fitness Based Log . Idea An App To Show A person’s fitness journey and overall progress toward there goals Elements For people to log their fitness goals and progress Max Heart Rate Calorie counter BMI calculator Plan for future goals Dietary Advice Resources for fitness Fitness Quiz Water Log | . | . Program Purpose: . The purpose we will use in our app will be able to give an output through a person input, using arrays, lists, if else and other elements of code. | . SCRUM team role . My team and I decided on the following roles: . Prasith: Backend Krishiv: Scrum Master Shivansh: Frontend Dhruva: Backend Advay: Devops . As Frontend I will make sure that our code is displayed to its best . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%204/2022/09/25/grouporganized.html",
            "relUrl": "/markdown/week%204/2022/09/25/grouporganized.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Code.org Quiz",
            "content": "The thoughts and ideas before creating the quiz . We decided to create a quiz about a video game | We reviewed the incomplete program given and we figuredo that we should add something which would tell if one got the answer wrong | . Quiz Creation . The onEvent function will be used and the variable used will be console.log: “message” | . During or After finished the quiz . Trying for loops was very difficult | Initiliazing a variable wasn’t working until we set it as a global variable | If, else if, and else statements came in handy in the scoring process | . Stuff which I did differnet than normal quiz . I added if, else if, and else statements to add up the points | I added pictures and transitions | I also added audio to the clip if one got it correct | link to the quiz: https://studio.code.org/projects/applab/7CbDivekQhy604GMl1L-g90DV9CtQBdsoT7uJl0f5iM/edit | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%204/2022/09/22/codequiz.html",
            "relUrl": "/markdown/week%204/2022/09/22/codequiz.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Collaboration CSP Notes",
            "content": "1.1 . Effective collobaration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it. | Collobaration that includes diverse perspectives helps avoid bias in the development of computing innovations. | Effective colloborative teams practice interspersonal skills, including, but not limited to: Communiation | Consenseus Building | Conflict Resolution | Negotiation | . | A Computing innovation includes a program as an integral part of its function. | A computing innovation can be physical, nonpyhysical computing osftware, or a nonphysical computing concept (e-commerce). | Collobarations that inclues diverse perspectives helps avoid bias in the development of computing innovations. | African Proverb: “If you want to go fast, go alone. If you want to go far, go together.” . | Essential Knowledge Consultation and communication with users are important aspects of the development of computing innovations | Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives and to develop a program that fully incorporates these perspectives | Online tools support collobaration by allowing programmers to share and provide feedback on ideas and doucmentws | Common models such as pair programming exist to facilitate collaboration. | . | Pair Programming: Two programmers work together as a pair. One (the driver) writes program code, while the other review each line of program code as it is typed in. | Think - Pair - Share: Students think through a problem alone, pair with a partner to share ideas, and then share with the rest of the class. | Make sure to leave comments in code | Online tools: (repl.it, Github) | . 1.2 . What I will learn The essential about computing innovations The purpose of computing innovations What are Computing Innovations Aplications like games and social media Physical devices like computers and cell phones Systems like email, ecommerce and cloud services Innovations solve problems Video 2 What I will learn The inputs and outputs of a program Data of the outputs related to that program Types of input Touch Audio Visual Text/numerical values Event Driven Enviornments Most programs have event driven environments Mouse clicks Swipes Button click Keyboard clicks Audio trigger Video 3 What I will Learn I will learn the functions of a program What is a Program A program is a single command | . 1.3 . Video 1.3.1 . How is a program developed . it is developed with an IdeaT | Then the problem it was based on is investigated | Also we have to talk about constraints | Observation w surveys | Plan Out design and organize tasks | Make prototypes and test | . | . Video 1.3.2 . Acknowledging Code Segments . It is important to acknowledge code actors Program isnt solo Each member deserves to get credit for their work and contributions Names must be written in documentation of the program When there is a problem the people who developed it can fix it Even though they might not be apart of the project they deserve to be credited . Video 1.3.3 . How developments are created . -Programers use documentation and other things to describe the function of the program . documentation is important because it makes you more efficient and it makes sense when you need to look back at what you did Comments are used with a # in python and a // in java .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%204/2022/09/22/CSPnotes.html",
            "relUrl": "/markdown/week%204/2022/09/22/CSPnotes.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Week 4 - Extra hacks",
            "content": "import getpass, sys # method to display question and get user&#39;s answers def question_with_response(prompt, qCount): print(&quot;Question &quot; + str(qCount) + &quot; : &quot; + prompt) msg = input() return msg # dictionary to hold questions and answers as key : value pairs questionsDict = {&quot;Is my group setup strictly on the basis of current friends and common interests? (Answer yes/no)&quot;: &quot;yes&quot;, &quot;Is my group setup with diversity in backgrounds, gender, and perspectives?(Answer yes/no)&quot;: &quot;yes&quot;, &quot;Is my group best equipped for the skill sets needed for success in classroom?(Answer yes/no)&quot;: &quot;yes&quot; } # number of questions as length of the dictionary questions = len(questionsDict) # set correct to 0 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print(&quot;Are you ready to take a test! Press Enter key to begin. Best of luck :)&quot;) input() questionCount = 0 # iterate over list of keys from the dictionary. pass dictionary key as question to the question_with_response function for key in questionsDict: questionCount += 1 rsp = question_with_response(key, questionCount) # compare the value from the dictionary to the user&#39;s input if rsp.lower() == questionsDict[key].lower(): print(rsp + &quot; is correct! Good Job!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! Better Luck next time.&quot;) # print final score print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # calculate percentage page = correct/questions * 100 # print percentage print(&quot;Total Perycentage: &quot; + str (format(page,&quot;.2f&quot;)) + &quot;%&quot;) #Editing . Hello, shivansh running /bin/python3 You will be asked 3 questions. Are you ready to take a test! Press Enter key to begin. Best of luck :) Question 1 : Is my group setup strictly on the basis of current friends and common interests? (Answer yes/no) is incorrect! Better Luck next time. Question 2 : Is my group setup with diversity in backgrounds, gender, and perspectives?(Answer yes/no) yes is correct! Good Job! Question 3 : Is my group best equipped for the skill sets needed for success in classroom?(Answer yes/no) yes is correct! Good Job! shivansh you scored 2/3 Total Percentage: 66.67% .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/09/13/week4.html",
            "relUrl": "/2022/09/13/week4.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Preformance Task",
            "content": "",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%203/2022/09/09/preformancetask.html",
            "relUrl": "/bash/week%203/2022/09/09/preformancetask.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Javascript - Week 5 Hacks",
            "content": "// define a function to hold data for a Contender function Contender(name, money, championships) { this.name = name; this.money = money; this.championships = championships; this.role = &quot;&quot;; } // define a setter for role in Contender data Contender.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Contender Contender.prototype.toJSON = function() { const obj = {name: this.name, money: this.money, championships: this.championships, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Contender and assign to variable ultimatechampion var ultimatechampion = new Contender(&quot;Dolphins&quot;, &quot;10.1B&quot;, 1000); // object type is easy to work with in JavaScript logItType(ultimatechampion); // before role logItType(ultimatechampion.toJSON()); ultimatechampion.setRole(&quot;ultimatechampion&quot;); logItType(ultimatechampion); logItType(ultimatechampion.toJSON()); . object ; Contender { name: &#39;Dolphins&#39;, money: &#39;10.1B&#39;, championships: 1000, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Dolphins&#34;,&#34;money&#34;:&#34;10.1B&#34;,&#34;championships&#34;:1000,&#34;role&#34;:&#34;&#34;} object ; Contender { name: &#39;Dolphins&#39;, money: &#39;10.1B&#39;, championships: 1000, role: &#39;ultimatechampion&#39; } string ; {&#34;name&#34;:&#34;Dolphins&#34;,&#34;money&#34;:&#34;10.1B&#34;,&#34;championships&#34;:1000,&#34;role&#34;:&#34;ultimatechampion&#34;} . var poverty = [ new Contender(&quot;Cheifs&quot;, &quot;5.4B&quot;, 2019), new Contender(&quot;Packers&quot;, &quot;4.1B&quot;, 2008), new Contender(&quot;Warriors&quot;, &quot;5.2B&quot;, 20122), new Contender(&quot;Bears&quot;, &quot;3.4B&quot;, 2014), new Contender(&quot;Ravens&quot;, &quot;1.7B&quot;, 1995), new Contender(&quot;Bengals&quot;, &quot;2.7B&quot;, 2021) ]; function League(ultimatechampion, poverty){ ultimatechampion.setRole(&quot;ultimatechampion&quot;); this.ultimatechampion = ultimatechampion; this.League = [ultimatechampion]; this.poverty = poverty; this.poverty.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.League.push(student); }); this.json = []; this.League.forEach(Contender =&gt; this.json.push(Contender.toJSON())); } compsci = new League(ultimatechampion, poverty); logItType(compsci.League); logItType(compsci.League[0].name); logItType(compsci.json[0]); logItType(JSON.parse(compsci.json[0])); . object ; [ Contender { name: &#39;Dolphins&#39;, money: &#39;10.1B&#39;, championships: 1000, role: &#39;ultimatechampion&#39; }, Contender { name: &#39;Cheifs&#39;, money: &#39;5.4B&#39;, championships: 2019, role: &#39;Student&#39; }, Contender { name: &#39;Packers&#39;, money: &#39;4.1B&#39;, championships: 2008, role: &#39;Student&#39; }, Contender { name: &#39;Warriors&#39;, money: &#39;5.2B&#39;, championships: 20122, role: &#39;Student&#39; }, Contender { name: &#39;Bears&#39;, money: &#39;3.4B&#39;, championships: 2014, role: &#39;Student&#39; }, Contender { name: &#39;Ravens&#39;, money: &#39;1.7B&#39;, championships: 1995, role: &#39;Student&#39; }, Contender { name: &#39;Bengals&#39;, money: &#39;2.7B&#39;, championships: 2021, role: &#39;Student&#39; } ] string ; Dolphins string ; {&#34;name&#34;:&#34;Dolphins&#34;,&#34;money&#34;:&#34;10.1B&#34;,&#34;championships&#34;:1000,&#34;role&#34;:&#34;ultimatechampion&#34;} object ; { name: &#39;Dolphins&#39;, money: &#39;10.1B&#39;, championships: 1000, role: &#39;ultimatechampion&#39; } . import getpass, sys # method to display question and get user&#39;s answers def question_with_response(prompt, qCount): print(&quot;Question &quot; + str(qCount) + &quot; : &quot; + prompt) msg = input() return msg # dictionary to hold questions and answers as key : value pairs questionsDict = {&quot;How much money does the Chiefs have&quot;: &quot;10.1B&quot;, &quot;How much money does the Chiefs have&quot;: &quot;5.4B&quot;, &quot;How much money does the Packers have&quot;: &quot;4.1B&quot;, &quot;How much money does the warriors have?&quot;: &quot;5.2B&quot;, &quot;How much money does the Bears have? &quot;: &quot;3.4B&quot;, &quot;How much money does the Ravens have?&quot;: &quot;1.7B&quot;, &quot;How much money does the Bengals have?&quot;: &quot;2.7B&quot; } # number of questions as length of the dictionary questions = len(questionsDict) # set correct to 0 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print(&quot;Are you ready to take a test! Press Enter key to begin. Best of luck :)&quot;) input() questionCount = 0 # iterate over list of keys from the dictionary. pass dictionary key as question to the question_with_response function for key in questionsDict: questionCount += 1 rsp = question_with_response(key, questionCount) # compare the value from the dictionary to the user&#39;s input if rsp.lower() == questionsDict[key].lower(): print(rsp + &quot; is correct! Good Job!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! Better Luck next time.&quot;) # print final score print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # calculate percentage page = correct/questions * 100 # print percentage print(&quot;Total Percentage: &quot; + str (format(page,&quot;.2f&quot;)) + &quot;%&quot;) . Hello, shivansh running /home/shivansh/anaconda3/bin/python You will be asked 6 questions. Are you ready to take a test! Press Enter key to begin. Best of luck :) Question 1 : How much money does the Chiefs have 5.4B is correct! Good Job! Question 2 : How much money does the Packers have 5.4B is incorrect! Better Luck next time. Question 3 : How much money does the warriors have? 3.1 is incorrect! Better Luck next time. Question 4 : How much money does the Bears have? 4.5B is incorrect! Better Luck next time. Question 5 : How much money does the Ravens have? 5.2B is incorrect! Better Luck next time. Question 6 : How much money does the Bengals have? 3.4B is incorrect! Better Luck next time. shivansh you scored 1/6 Total Percentage: 16.67% . League.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Money&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Championships&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of compsci.League) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.money + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.championships + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(compsci._toHtml()); . NameMoneyChampionships . Dolphins | 10.1B | 1000 | Cheifs | 5.4B | 2019 | Packers | 4.1B | 2008 | Warriors | 5.2B | 20122 | Bears | 3.4B | 2014 | Ravens | 1.7B | 1995 | Bengals | 2.7B | 2021 | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%205/2022/09/05/javascriptocode.html",
            "relUrl": "/bash/week%205/2022/09/05/javascriptocode.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Time Box Fragments",
            "content": "Shivansh Goel Time Box Fragments . Here are the time box fragments organized by weeks . Week 0 | Installing WSL | Installing Jupyter Notebook and Python | Installing VScode | . Week 1 | Python Quiz | Bash Tutorial | Editing index.html | . Week 2 | Lists and Dictionaries | HTML Fragments |   | . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%202/2022/08/31/tables.html",
            "relUrl": "/markdown/week%202/2022/08/31/tables.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Reporting theme changes",
            "content": "Here is the bad stuff that happened . Note: The following image is inserted using a Jekyll Liquid Filter for relative URL . All the pages, the links on the right top side were removed thus removing an integral part of the blog. | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%202/2022/08/31/Bloggingchanges.html",
            "relUrl": "/markdown/week%202/2022/08/31/Bloggingchanges.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "This is Week 3 Hacks Python Lists",
            "content": "InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Shivansh&quot;, &quot;LastName&quot;: &quot;Goel&quot;, &quot;DOB&quot;: &quot;October 29 2007&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;EMail&quot;: &quot;shivanshggamer@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Red Bugatti&quot;, &quot;Yellow Bugatti&quot;, &quot;Orange Bugatti&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Joe&quot;, &quot;LastName&quot;: &quot;Mama&quot;, &quot;DOB&quot;: &quot;July 4&quot;, &quot;Residence&quot;: &quot;New York&quot;, &quot;Email&quot;: &quot;joemama@yahoo.com&quot;, &quot;Owns_Cars&quot;: [&quot;Lamborhini&quot;] }) . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # Print the data structure def for_loop(InfoDb): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop(InfoDb) . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Shivansh Goel Residence: San Diego Birth Day: October 29 2007 Cars: Red Bugatti, Yellow Bugatti, Orange Bugatti Joe Mama Residence: New York Birth Day: July 4 Cars: Lamborhini . def PythonQuiz(prompt): global word print (&quot;Question: &quot; + prompt) word = input() return word questions_number = 5 correct_answer = 0 print(&quot;Hello, you will be asked &quot; + str(questions_number) + &quot; questions you should know.&quot;) TheQuiz=[] TheQuiz.append({ &quot;What value is a dozen&quot;: &quot;12&quot;, &quot;How many days are in a year&quot;: &quot;365&quot;, &quot;How many years are in a decade&quot;: &quot;10&quot;, &quot;How much eggs are too much&quot;: &quot;5&quot;, &quot;What is the main measurment for distance in USA&quot;: &quot;mile&quot;, }) for dict in TheQuiz: for questions, answers in dict.items(): PythonQuiz(questions) if word == answers: print(input() + &quot; is correct&quot;) correct_answer += 1 else: print(input() +&quot; is incorrect&quot;) print(&quot;You scored &quot; + str(correct_answer) + &quot;/&quot; + str(questions_number) + &quot;. Good Job!&quot;) . Hello, you will be asked 5 questions you should know. Question: What value is a dozen 365 is correct Question: How many days are in a year 5 is incorrect Question: How many years are in a decade 5 is incorrect Question: How much eggs are too much 5 is correct Question: What is the main measurment for distance in USA mile is correct You scored 3/5. Good Job! . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Shivansh Goel Residence: San Diego Birth Day: October 29 2007 Cars: Red Bugatti, Yellow Bugatti, Orange Bugatti Joe Mama Residence: New York Birth Day: July 4 Cars: Lamborhini .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%202/2022/08/30/pythonlists.html",
            "relUrl": "/bash/week%202/2022/08/30/pythonlists.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Alumni Panel Notes",
            "content": "Alumni Panel Notes . Introduction . Mostly all graduates to UCs | Some of them are not majoring in computer science | . Question 1: Biggest Challenge in Computer Science? . Keeping motivation | A lot of problems and hard to find on the internet | Focus on your own path and try to not to compare with others | Try to ignore clashing egos | Hard finding motivation because of smarter people | Have a better mindset to learn instead of just trying to get stuff down | Getting started in coding is very hard | . Question 2: Are there any PBL scenarios in college computer science classes? . There are 2 PBL scenarios in college. 1 of them is defineftly in senior year Project based learning classes and some theory based classes. | There are a lot of PBL exams which are definite for computer silence | A lot of group based and managing group. Be Careful of getting used for doing too much group work. | Be good at managing work | . Question 3: Have you applied CS in your major if you are not majoring in CS? . There is a lot of coding involved in mechanical engineering which will help you out a lot. | Optimizing things are also very well used in a lot of different majors | Computer science can help with very high level math | A lot of requirements in Stats courses and psychology courses need some type of Computer Science | Programming is almost everywhere in a lot of STEM majors | . Question 4: For existing college students have you had a job with school or professor? . Getting internships and talking to professors will help get better jobs. | Try to be unique from the 200 other students in the college lecture | 2 of the alumnis had Internships in Northrop Grumman | 1 of the alumni had Internships in a company doing APIs and web development | . Other Questions: . Doing 2 or 3 personal projects will help out with applying for internships and stuff Path finding algorithms (Graph Theory, etc) a lot of data visualization | Doing a lot of data application in projects and classes | Club called Trident A in UCSD | When trying to apply for internships always have a resume | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%201/2022/08/29/Alumni.html",
            "relUrl": "/markdown/week%201/2022/08/29/Alumni.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Shivansh's Bash Tutorial Hacks",
            "content": "Setup project local folders . Create / verify local folders exist | Clone / update github repository | . echo &quot;Setting up local folders&quot; export project_dir=$HOME/vscode_shivansh # setting local project folders in vscode_shivansh export project=$project_dir/Shivansh-Goel-Fast-Pages # my git repository will be cloned here export project_repo=&quot;https://github.com/deadshotlegend/Shivansh-Goel-Fast-Pages.git&quot; # my project cd ~ # start in home directory # Check if project directory exists. If not, create one if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... making directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Check if the project directory exists. If exists, then the project was cloned before, and hence # need to updated. If not exists, then the project hasn&#39;t been cloned yet, and I must clone now if [ ! -d $project ] then echo &quot;Git Project directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ else echo &quot;Git Project directory $project exists... pulling $project_repo&quot; cd $project git pull origin master echo &quot;$project_repo successfully updated from origin&quot; cd ~ fi echo &quot;Project directory $project successfuly cloned / updated.&quot; . Setting up local folders Directory /home/shivansh/vscode_shivansh exists. Git Project directory /home/shivansh/vscode_shivansh/Shivansh-Goel-Fast-Pages exists... pulling https://github.com/deadshotlegend/Shivansh-Goel-Fast-Pages.git From https://github.com/deadshotlegend/Shivansh-Goel-Fast-Pages * branch master -&gt; FETCH_HEAD Already up to date. https://github.com/deadshotlegend/Shivansh-Goel-Fast-Pages.git successfully updated from origin Project directory /home/shivansh/vscode_shivansh/Shivansh-Goel-Fast-Pages successfuly cloned / updated. . Validate necessary kernels exists . Javascript | Bash | Python3 | . jupyter kernelspec list &gt; /tmp/kernellist.txt python_exists=`awk &#39;$1 == &quot;python3&quot; { print $2 }&#39; /tmp/kernellist.txt` if [ &quot;&quot; != $python_exists ] then echo &quot;Python Kernel Exists at $python_exists&quot; else echo &quot;Python Kernel Does Not Exist&quot; fi bash_exists=`awk &#39;$1 == &quot;bash&quot; { print $2 }&#39; /tmp/kernellist.txt` if [ &quot;&quot; != $bash_exists ] then echo &quot;Bash Kernel Exists at $bash_exists&quot; else echo &quot;Bash Kernel Does Not Exist&quot; fi javascript_exists=`awk &#39;$1 == &quot;javascript&quot; { print $2 }&#39; /tmp/kernellist.txt` if [ &quot;&quot; != $javascript_exists ] then echo &quot;Javascript Kernel Exists at $javascript_exists&quot; else echo &quot;Javascript Kernel Does Not Exist&quot; fi . Python Kernel Exists at /home/shivansh/.local/share/jupyter/kernels/python3 Bash Kernel Exists at /home/shivansh/.local/share/jupyter/kernels/bash Javascript Kernel Exists at /home/shivansh/.local/share/jupyter/kernels/javascript . . categories: [Notebooks] . Validate necessary packages exist . python | ipykernel | bash-kernel | jupyter | more can be added to package_to_validate in script below | . package_list=/tmp/packagelist.txt if [[ ! -f $package_list ]] then conda list -n base &gt; $package_list fi package_to_validate=(python ipykernel bash-kernel jupyter) for pname in &quot;${package_to_validate[@]}&quot; do p_ver=`awk &#39;$1 == pname { print $2 }&#39; pname=$pname /tmp/packagelist.txt` if [ &quot;$p_ver&quot; == &quot;&quot; ] then echo &quot;$pname not installed&quot; else echo &quot;$pname installed with version $p_ver&quot; fi done . python installed with version 3.9.12 ipykernel installed with version 6.9.1 bash-kernel installed with version 0.8.0 jupyter installed with version 1.0.0 .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%201/2022/08/28/ShivanshBashTutorial.html",
            "relUrl": "/bash/week%201/2022/08/28/ShivanshBashTutorial.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "This is the personalized quiz for Week 2 Hacks",
            "content": "My Hacks . I have removed the repeating questions and anwers with a iterative contruct using dictionaries | Added more questions of my own and also calculated a percentage at the end. | Lastly, I have made the answer check case insensitive. | . import getpass, sys # method to display question and get user&#39;s answers def question_with_response(prompt, qCount): print(&quot;Question &quot; + str(qCount) + &quot; : &quot; + prompt) msg = input() return msg # dictionary to hold questions and answers as key : value pairs questionsDict = {&quot;What command is used to include other functions that were previously developed?&quot;: &quot;import&quot;, &quot;What command in this example is used to evaluate a response?&quot;: &quot;if&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;: &quot;expression&quot;, &quot;What does Jupyter Notebooks use?&quot;: &quot;python&quot;, &quot;What is the end of the file name of Mark Down Post?&quot;: &quot;.md&quot;, &quot;What kernel does one need to use to use python?&quot;: &quot;ipykernel&quot;, &quot;What command in terminal allows one to switch directory?&quot;: &quot;cd&quot; } # number of questions as length of the dictionary questions = len(questionsDict) # set correct to 0 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print(&quot;Are you ready to take a test! Press Enter key to begin. Best of luck :)&quot;) input() questionCount = 0 # iterate over list of keys from the dictionary. pass dictionary key as question to the question_with_response function for key in questionsDict: questionCount += 1 rsp = question_with_response(key, questionCount) # compare the value from the dictionary to the user&#39;s input if rsp.lower() == questionsDict[key].lower(): print(rsp + &quot; is correct! Good Job!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! Better Luck next time.&quot;) # print final score print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # calculate percentage page = correct/questions * 100 # print percentage print(&quot;Total Percentage: &quot; + str (format(page,&quot;.2f&quot;)) + &quot;%&quot;) . Hello, shivansh running /bin/python3 You will be asked 7 questions. Are you ready to take a test! Press Enter key to begin. Best of luck :) Question 1 : What command is used to include other functions that were previously developed? import is correct! Good Job! Question 2 : What command in this example is used to evaluate a response? if is correct! Good Job! Question 3 : Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Good Job! Question 4 : What does Jupyter Notebooks use? python is correct! Good Job! Question 5 : What is the end of the file name of Mark Down Post? .md is correct! Good Job! Question 6 : What kernel does one need to use to use python? ipykernel is correct! Good Job! Question 7 : What command in terminal allows one to switch directory? cd is correct! Good Job! shivansh you scored 7/7 Total Percentage: 100.00% .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%201/2022/08/25/personalizedquiz.html",
            "relUrl": "/bash/week%201/2022/08/25/personalizedquiz.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Shivansh Docx Personalized",
            "content": "Stuff that I like to do: . I like to study the subjects for my school . | I like to code and have fun with computers . | I like to play sports . | I like to play video games . | . Stuff that I want to improve this year . I want to improve in my overall education . | I want to get more fit and healthy than last year . | I want to expand my hobbies and try out new stuff this year . | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/2022/08/25/Shivansh-docx-personalized.html",
            "relUrl": "/2022/08/25/Shivansh-docx-personalized.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Shivansh's personalized page",
            "content": "Personal Study and Work Pages . Goal for using this page . Useful for connecting notes | Useufl transporting and using code | Help monitor and instantiate content | . . .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%201/2022/08/24/secondmarkdown.html",
            "relUrl": "/markdown/week%201/2022/08/24/secondmarkdown.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Shivansh Goel's First Python Code and use of Jupyter Notebook",
            "content": "print(&quot;Hello, world!&quot;) . Hello, world! .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/bash/week%201/2022/08/21/ShivanshJupyter.html",
            "relUrl": "/bash/week%201/2022/08/21/ShivanshJupyter.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Shivansh's first Markdown Post",
            "content": "Shivansh Goel Mark Down Post . Goals For CSP this year: . Become better at coding | Learn the various computer languages | Become better with websites and computers | .",
            "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/markdown/week%200/2022/08/21/Shivansh.html",
            "relUrl": "/markdown/week%200/2022/08/21/Shivansh.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello, I am Shivansh Goel and part of APCSP period 5. . I am in 10th grade at Del Norte High School. I am learning Python programming and currently having fun with editing pages using Jupyter and GitHub and Markdown :sunglasses: . The following image is inserted using a Jekyll Liquid Filter for relative URL .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "APCSP Vocabulary",
          "content": "This APCSP Notes: . def = define a function | import = importing other function for uses | cd = change directory | . .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/b-vocab/",
          "relUrl": "/b-vocab/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Submenu",
          "content": "&lt;!Doctype html&gt; . My first Table . What I have learned from APCSP . API . This is my api | . .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "APCSP Notes",
          "content": "This is the notes for Shivansh Goel: . Week 1 . print function: A way to print meassages in python | If else statement, if is a certain condition and it will produce the stuff inside the code if the condition is met | . Week 2 . lists and dictionaries: ways to put sequence of elements using python code | loops: A way to replay the function when a certain condition is being met (true or false) | . Week 3/4/5 . Learning about Javascript and code.org | In javascript we learned how to create functions. | .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Personalized Study",
          "content": "Find assingments on these links and edit them here: Link to Canas: https://poway.instructure.com/ Link to myplan: https://launchpad.classlink.com/poway Link to GoogleDrive: https://www.google.com/drive/ .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/personalstudy/",
          "relUrl": "/personalstudy/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://deadshotlegend.github.io/Shivansh-Goel-Fast-Pages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}